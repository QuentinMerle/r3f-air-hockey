{"version":3,"file":"Goal-4d25d4af.js","sources":["../../src/assets/Goal.jsx"],"sourcesContent":["import React, { useState, Suspense } from \"react\";\nimport { Text } from \"@react-three/drei\";\nimport { RigidBody, CuboidCollider } from \"@react-three/rapier\";\nimport { useStore } from \"../store\";\n\nconst Goal = ({\n  nodes,\n  materials,\n  name,\n  position,\n  net,\n  collider,\n  rotationy,\n}) => {\n  const [intersecting, setIntersection] = useState(false);\n  const scorePlayerOne = useStore((state) => state.playerOne);\n  const scorePlayerTwo = useStore((state) => state.playerTwo);\n  const goalValue = useStore((state) => state.scoreValue);\n  const addScore = useStore((state) => state.increaseScore);\n  const reinit = useStore((state) => state.reinitPosition);\n  const addGift = useStore((state) => state.getGift);\n  const endGame = useStore((state) => state.stopGame);\n\n  const goal = (payload) => {\n    if (payload.colliderObject.name == \"palet\") {\n      addScore(payload.target.rigidBodyObject.name, goalValue);\n      reinit(true);\n      setIntersection(true);\n      // if (scorePlayerOne > scorePlayerTwo + 2) {\n      if (scorePlayerOne >= 1) {\n        addGift(true);\n      }\n      endGame(payload.target.rigidBodyObject.name);\n    }\n  };\n\n  return (\n    <RigidBody\n      name={name}\n      type=\"fixed\"\n      colliders=\"trimesh\"\n      restitution={0.2}\n      friction={0}>\n      <mesh\n        castShadow\n        geometry={nodes.goal.geometry}\n        material={materials.palet}\n        position={position}\n        rotation-y={rotationy}\n      />\n      <mesh\n        castShadow\n        geometry={nodes.net.geometry}\n        position={net}\n        rotation-y={rotationy}>\n        <meshBasicMaterial color=\"white\" />\n      </mesh>\n      <Suspense fallback={null}>\n        {intersecting && (\n          <Text\n            color=\"red\"\n            position={[0, 1, 0]}\n            font=\"./russo-one-v14-latin-regular.woff\"\n            fontSize={2}>\n            GOAL!\n          </Text>\n        )}\n      </Suspense>\n\n      {/**\n       * We create a collider and set it to be a 'sensor'\n       * This enabled intersection events, and enables\n       * colliders to pass through it.\n       */}\n      <CuboidCollider\n        position={collider}\n        args={[0.5, 0.2, 0.2]}\n        sensor\n        onIntersectionEnter={(payload) => goal(payload)}\n        onIntersectionExit={() => setIntersection(false)}\n      />\n    </RigidBody>\n  );\n};\n\nexport default Goal;\n"],"names":["Goal","nodes","materials","name","position","net","collider","rotationy","intersecting","setIntersection","useState","scorePlayerOne","useStore","state","goalValue","addScore","reinit","addGift","endGame","goal","payload","jsxs","RigidBody","jsx","Suspense","Text","CuboidCollider"],"mappings":"6EAKA,MAAMA,EAAO,CAAC,CACZ,MAAAC,EACA,UAAAC,EACA,KAAAC,EACA,SAAAC,EACA,IAAAC,EACA,SAAAC,EACA,UAAAC,CACF,IAAM,CACJ,KAAM,CAACC,EAAcC,CAAe,EAAIC,WAAS,EAAK,EAChDC,EAAiBC,EAAUC,GAAUA,EAAM,SAAS,EACnCD,EAAUC,GAAUA,EAAM,SAAS,EAC1D,MAAMC,EAAYF,EAAUC,GAAUA,EAAM,UAAU,EAChDE,EAAWH,EAAUC,GAAUA,EAAM,aAAa,EAClDG,EAASJ,EAAUC,GAAUA,EAAM,cAAc,EACjDI,EAAUL,EAAUC,GAAUA,EAAM,OAAO,EAC3CK,EAAUN,EAAUC,GAAUA,EAAM,QAAQ,EAE5CM,EAAQC,GAAY,CACpBA,EAAQ,eAAe,MAAQ,UACjCL,EAASK,EAAQ,OAAO,gBAAgB,KAAMN,CAAS,EACvDE,EAAO,EAAI,EACXP,EAAgB,EAAI,EAEhBE,GAAkB,GACpBM,EAAQ,EAAI,EAENC,EAAAE,EAAQ,OAAO,gBAAgB,IAAI,EAC7C,EAIA,OAAAC,EAACC,EAAA,CACC,KAAAnB,EACA,KAAK,QACL,UAAU,UACV,YAAa,GACb,SAAU,EACV,SAAA,CAAAoB,EAAC,OAAA,CACC,WAAU,GACV,SAAUtB,EAAM,KAAK,SACrB,SAAUC,EAAU,MACpB,SAAAE,EACA,aAAYG,CAAA,CACd,EACAgB,EAAC,OAAA,CACC,WAAU,GACV,SAAUtB,EAAM,IAAI,SACpB,SAAUI,EACV,aAAYE,EACZ,SAAAgB,EAAC,oBAAkB,CAAA,MAAM,OAAQ,CAAA,CAAA,CACnC,EACCA,EAAAC,EAAA,SAAA,CAAS,SAAU,KACjB,SACChB,GAAAe,EAACE,EAAA,CACC,MAAM,MACN,SAAU,CAAC,EAAG,EAAG,CAAC,EAClB,KAAK,qCACL,SAAU,EAAG,SAAA,OAAA,CAAA,EAInB,EAOAF,EAACG,EAAA,CACC,SAAUpB,EACV,KAAM,CAAC,GAAK,GAAK,EAAG,EACpB,OAAM,GACN,oBAAsBc,GAAYD,EAAKC,CAAO,EAC9C,mBAAoB,IAAMX,EAAgB,EAAK,CAAA,CACjD,CAAA,CAAA,CAAA,CAGN"}