{"version":3,"file":"Bonus-3caded20.js","sources":["../../node_modules/@react-three/drei/core/shaderMaterial.js","../../node_modules/@react-three/drei/core/useFBO.js","../../node_modules/@react-three/drei/materials/DiscardMaterial.js","../../node_modules/@react-three/drei/core/MeshTransmissionMaterial.js","../../node_modules/three/src/math/MathUtils.js","../../src/assets/Bonus.jsx"],"sourcesContent":["import * as THREE from 'three';\n\nfunction shaderMaterial(uniforms, vertexShader, fragmentShader, onInit) {\n  const material = class material extends THREE.ShaderMaterial {\n    constructor(parameters = {}) {\n      const entries = Object.entries(uniforms); // Create unforms and shaders\n\n      super({\n        uniforms: entries.reduce((acc, [name, value]) => {\n          const uniform = THREE.UniformsUtils.clone({\n            [name]: {\n              value\n            }\n          });\n          return { ...acc,\n            ...uniform\n          };\n        }, {}),\n        vertexShader,\n        fragmentShader\n      }); // Create getter/setters\n\n      this.key = '';\n      entries.forEach(([name]) => Object.defineProperty(this, name, {\n        get: () => this.uniforms[name].value,\n        set: v => this.uniforms[name].value = v\n      })); // Assign parameters, this might include uniforms\n\n      Object.assign(this, parameters); // Call onInit\n\n      if (onInit) onInit(this);\n    }\n\n  };\n  material.key = THREE.MathUtils.generateUUID();\n  return material;\n}\n\nexport { shaderMaterial };\n","import * as React from 'react';\nimport * as THREE from 'three';\nimport { useThree } from '@react-three/fiber';\n\n// ðŸ‘‡ uncomment when TS version supports function overloads\n// export function useFBO(settings?: FBOSettings)\nfunction useFBO(\n/** Width in pixels, or settings (will render fullscreen by default) */\nwidth,\n/** Height in pixels */\nheight,\n/**Settings */\nsettings) {\n  const {\n    gl,\n    size,\n    viewport\n  } = useThree();\n\n  const _width = typeof width === 'number' ? width : size.width * viewport.dpr;\n\n  const _height = typeof height === 'number' ? height : size.height * viewport.dpr;\n\n  const _settings = (typeof width === 'number' ? settings : width) || {};\n\n  const {\n    samples = 0,\n    depth,\n    ...targetSettings\n  } = _settings;\n  const target = React.useMemo(() => {\n    let target;\n    target = new THREE.WebGLRenderTarget(_width, _height, {\n      minFilter: THREE.LinearFilter,\n      magFilter: THREE.LinearFilter,\n      encoding: gl.outputEncoding,\n      type: THREE.HalfFloatType,\n      ...targetSettings\n    });\n\n    if (depth) {\n      target.depthTexture = new THREE.DepthTexture(_width, _height, THREE.FloatType);\n    }\n\n    target.samples = samples;\n    return target;\n  }, []);\n  React.useLayoutEffect(() => {\n    target.setSize(_width, _height);\n    if (samples) target.samples = samples;\n  }, [samples, target, _width, _height]);\n  React.useEffect(() => {\n    return () => target.dispose();\n  }, []);\n  return target;\n}\n\nexport { useFBO };\n","import { shaderMaterial } from '../core/shaderMaterial.js';\n\nconst DiscardMaterial = shaderMaterial({}, 'void main() { }', 'void main() { gl_FragColor = vec4(0.0, 0.0, 0.0, 0.0); discard;  }');\n\nexport { DiscardMaterial };\n","import _extends from '@babel/runtime/helpers/esm/extends';\nimport * as THREE from 'three';\nimport * as React from 'react';\nimport { extend, useFrame } from '@react-three/fiber';\nimport { useFBO } from './useFBO.js';\nimport { DiscardMaterial } from '../materials/DiscardMaterial.js';\n\nclass MeshTransmissionMaterialImpl extends THREE.MeshPhysicalMaterial {\n  constructor(samples = 6, transmissionSampler = false) {\n    super();\n    this.uniforms = {\n      chromaticAberration: {\n        value: 0.05\n      },\n      // Transmission must always be 0, unless transmissionSampler is being used\n      transmission: {\n        value: 0\n      },\n      // Instead a workaround is used, see below for reasons why\n      _transmission: {\n        value: 1\n      },\n      transmissionMap: {\n        value: null\n      },\n      // Roughness is 1 in THREE.MeshPhysicalMaterial but it makes little sense in a transmission material\n      roughness: {\n        value: 0\n      },\n      thickness: {\n        value: 0\n      },\n      thicknessMap: {\n        value: null\n      },\n      attenuationDistance: {\n        value: Infinity\n      },\n      attenuationColor: {\n        value: new THREE.Color('white')\n      },\n      anisotropy: {\n        value: 0.1\n      },\n      time: {\n        value: 0\n      },\n      distortion: {\n        value: 0.0\n      },\n      distortionScale: {\n        value: 0.5\n      },\n      temporalDistortion: {\n        value: 0.0\n      },\n      buffer: {\n        value: null\n      }\n    };\n\n    this.onBeforeCompile = shader => {\n      shader.uniforms = { ...shader.uniforms,\n        ...this.uniforms\n      }; // If the transmission sampler is active inject a flag\n\n      if (transmissionSampler) shader.defines.USE_SAMPLER = ''; // Otherwise we do use use .transmission and must therefore force USE_TRANSMISSION\n      // because threejs won't inject it for us\n      else shader.defines.USE_TRANSMISSION = ''; // Head\n\n      shader.fragmentShader =\n      /*glsl*/\n      `\n      uniform float chromaticAberration;         \n      uniform float anisotropy;      \n      uniform float time;\n      uniform float distortion;\n      uniform float distortionScale;\n      uniform float temporalDistortion;\n      uniform sampler2D buffer;\n\n      vec3 random3(vec3 c) {\n        float j = 4096.0*sin(dot(c,vec3(17.0, 59.4, 15.0)));\n        vec3 r;\n        r.z = fract(512.0*j);\n        j *= .125;\n        r.x = fract(512.0*j);\n        j *= .125;\n        r.y = fract(512.0*j);\n        return r-0.5;\n      }\n\n      float seed = 0.0;\n      uint hash( uint x ) {\n        x += ( x << 10u );\n        x ^= ( x >>  6u );\n        x += ( x <<  3u );\n        x ^= ( x >> 11u );\n        x += ( x << 15u );\n        return x;\n      }\n\n      // Compound versions of the hashing algorithm I whipped together.\n      uint hash( uvec2 v ) { return hash( v.x ^ hash(v.y)                         ); }\n      uint hash( uvec3 v ) { return hash( v.x ^ hash(v.y) ^ hash(v.z)             ); }\n      uint hash( uvec4 v ) { return hash( v.x ^ hash(v.y) ^ hash(v.z) ^ hash(v.w) ); }\n\n      // Construct a float with half-open range [0:1] using low 23 bits.\n      // All zeroes yields 0.0, all ones yields the next smallest representable value below 1.0.\n      float floatConstruct( uint m ) {\n        const uint ieeeMantissa = 0x007FFFFFu; // binary32 mantissa bitmask\n        const uint ieeeOne      = 0x3F800000u; // 1.0 in IEEE binary32\n        m &= ieeeMantissa;                     // Keep only mantissa bits (fractional part)\n        m |= ieeeOne;                          // Add fractional part to 1.0\n        float  f = uintBitsToFloat( m );       // Range [1:2]\n        return f - 1.0;                        // Range [0:1]\n      }\n\n      // Pseudo-random value in half-open range [0:1].\n      float random( float x ) { return floatConstruct(hash(floatBitsToUint(x))); }\n      float random( vec2  v ) { return floatConstruct(hash(floatBitsToUint(v))); }\n      float random( vec3  v ) { return floatConstruct(hash(floatBitsToUint(v))); }\n      float random( vec4  v ) { return floatConstruct(hash(floatBitsToUint(v))); }\n\n      float rand() {\n        float result = random(vec3(gl_FragCoord.xy, seed));\n        seed += 1.0;\n        return result;\n      }\n\n      const float F3 =  0.3333333;\n      const float G3 =  0.1666667;\n\n      float snoise(vec3 p) {\n        vec3 s = floor(p + dot(p, vec3(F3)));\n        vec3 x = p - s + dot(s, vec3(G3));\n        vec3 e = step(vec3(0.0), x - x.yzx);\n        vec3 i1 = e*(1.0 - e.zxy);\n        vec3 i2 = 1.0 - e.zxy*(1.0 - e);\n        vec3 x1 = x - i1 + G3;\n        vec3 x2 = x - i2 + 2.0*G3;\n        vec3 x3 = x - 1.0 + 3.0*G3;\n        vec4 w, d;\n        w.x = dot(x, x);\n        w.y = dot(x1, x1);\n        w.z = dot(x2, x2);\n        w.w = dot(x3, x3);\n        w = max(0.6 - w, 0.0);\n        d.x = dot(random3(s), x);\n        d.y = dot(random3(s + i1), x1);\n        d.z = dot(random3(s + i2), x2);\n        d.w = dot(random3(s + 1.0), x3);\n        w *= w;\n        w *= w;\n        d *= w;\n        return dot(d, vec4(52.0));\n      }\n\n      float snoiseFractal(vec3 m) {\n        return 0.5333333* snoise(m)\n              +0.2666667* snoise(2.0*m)\n              +0.1333333* snoise(4.0*m)\n              +0.0666667* snoise(8.0*m);\n      }\\n` + shader.fragmentShader; // Remove transmission\n\n      shader.fragmentShader = shader.fragmentShader.replace('#include <transmission_pars_fragment>',\n      /*glsl*/\n      `\n        #ifdef USE_TRANSMISSION\n          // Transmission code is based on glTF-Sampler-Viewer\n          // https://github.com/KhronosGroup/glTF-Sample-Viewer\n          uniform float _transmission;\n          uniform float thickness;\n          uniform float attenuationDistance;\n          uniform vec3 attenuationColor;\n          #ifdef USE_TRANSMISSIONMAP\n            uniform sampler2D transmissionMap;\n          #endif\n          #ifdef USE_THICKNESSMAP\n            uniform sampler2D thicknessMap;\n          #endif\n          uniform vec2 transmissionSamplerSize;\n          uniform sampler2D transmissionSamplerMap;\n          uniform mat4 modelMatrix;\n          uniform mat4 projectionMatrix;\n          varying vec3 vWorldPosition;\n          vec3 getVolumeTransmissionRay( const in vec3 n, const in vec3 v, const in float thickness, const in float ior, const in mat4 modelMatrix ) {\n            // Direction of refracted light.\n            vec3 refractionVector = refract( - v, normalize( n ), 1.0 / ior );\n            // Compute rotation-independant scaling of the model matrix.\n            vec3 modelScale;\n            modelScale.x = length( vec3( modelMatrix[ 0 ].xyz ) );\n            modelScale.y = length( vec3( modelMatrix[ 1 ].xyz ) );\n            modelScale.z = length( vec3( modelMatrix[ 2 ].xyz ) );\n            // The thickness is specified in local space.\n            return normalize( refractionVector ) * thickness * modelScale;\n          }\n          float applyIorToRoughness( const in float roughness, const in float ior ) {\n            // Scale roughness with IOR so that an IOR of 1.0 results in no microfacet refraction and\n            // an IOR of 1.5 results in the default amount of microfacet refraction.\n            return roughness * clamp( ior * 2.0 - 2.0, 0.0, 1.0 );\n          }\n          vec4 getTransmissionSample( const in vec2 fragCoord, const in float roughness, const in float ior ) {\n            float framebufferLod = log2( transmissionSamplerSize.x ) * applyIorToRoughness( roughness, ior );            \n            #ifdef USE_SAMPLER\n              #ifdef texture2DLodEXT\n                return texture2DLodEXT(transmissionSamplerMap, fragCoord.xy, framebufferLod);\n              #else\n                return texture2D(transmissionSamplerMap, fragCoord.xy, framebufferLod);\n              #endif\n            #else\n              return texture2D(buffer, fragCoord.xy);\n            #endif\n          }\n          vec3 applyVolumeAttenuation( const in vec3 radiance, const in float transmissionDistance, const in vec3 attenuationColor, const in float attenuationDistance ) {\n            if ( isinf( attenuationDistance ) ) {\n              // Attenuation distance is +âˆž, i.e. the transmitted color is not attenuated at all.\n              return radiance;\n            } else {\n              // Compute light attenuation using Beer's law.\n              vec3 attenuationCoefficient = -log( attenuationColor ) / attenuationDistance;\n              vec3 transmittance = exp( - attenuationCoefficient * transmissionDistance ); // Beer's law\n              return transmittance * radiance;\n            }\n          }\n          vec4 getIBLVolumeRefraction( const in vec3 n, const in vec3 v, const in float roughness, const in vec3 diffuseColor,\n            const in vec3 specularColor, const in float specularF90, const in vec3 position, const in mat4 modelMatrix,\n            const in mat4 viewMatrix, const in mat4 projMatrix, const in float ior, const in float thickness,\n            const in vec3 attenuationColor, const in float attenuationDistance ) {\n            vec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, ior, modelMatrix );\n            vec3 refractedRayExit = position + transmissionRay;\n            // Project refracted vector on the framebuffer, while mapping to normalized device coordinates.\n            vec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );\n            vec2 refractionCoords = ndcPos.xy / ndcPos.w;\n            refractionCoords += 1.0;\n            refractionCoords /= 2.0;\n            // Sample framebuffer to get pixel the refracted ray hits.\n            vec4 transmittedLight = getTransmissionSample( refractionCoords, roughness, ior );\n            vec3 attenuatedColor = applyVolumeAttenuation( transmittedLight.rgb, length( transmissionRay ), attenuationColor, attenuationDistance );\n            // Get the specular component.\n            vec3 F = EnvironmentBRDF( n, v, specularColor, specularF90, roughness );\n            return vec4( ( 1.0 - F ) * attenuatedColor * diffuseColor, transmittedLight.a );\n          }\n        #endif\\n`); // Add refraction\n\n      shader.fragmentShader = shader.fragmentShader.replace('#include <transmission_fragment>',\n      /*glsl*/\n      `  \n        // Improve the refraction to use the world pos\n        material.transmission = _transmission;\n        material.transmissionAlpha = 1.0;\n        material.thickness = thickness;\n        material.attenuationDistance = attenuationDistance;\n        material.attenuationColor = attenuationColor;\n        #ifdef USE_TRANSMISSIONMAP\n          material.transmission *= texture2D( transmissionMap, vUv ).r;\n        #endif\n        #ifdef USE_THICKNESSMAP\n          material.thickness *= texture2D( thicknessMap, vUv ).g;\n        #endif\n        \n        vec3 pos = vWorldPosition;\n        vec3 v = normalize( cameraPosition - pos );\n        vec3 n = inverseTransformDirection( normal, viewMatrix );\n        vec3 transmission = vec3(0.0);\n        float transmissionR, transmissionB, transmissionG;\n        float randomCoords = rand();\n        float thickness_smear = thickness * max(pow(roughnessFactor, 0.33), anisotropy);\n        vec3 distortionNormal = vec3(0.0);\n        vec3 temporalOffset = vec3(time, -time, -time) * temporalDistortion;\n        if (distortion > 0.0) {\n          distortionNormal = distortion * vec3(snoiseFractal(vec3((pos * distortionScale + temporalOffset))), snoiseFractal(vec3(pos.zxy * distortionScale - temporalOffset)), snoiseFractal(vec3(pos.yxz * distortionScale + temporalOffset)));\n        }\n        for (float i = 0.0; i < ${samples}.0; i ++) {\n          vec3 sampleNorm = normalize(n + roughnessFactor * roughnessFactor * 2.0 * normalize(vec3(rand() - 0.5, rand() - 0.5, rand() - 0.5)) * pow(rand(), 0.33) + distortionNormal);\n          transmissionR = getIBLVolumeRefraction(\n            sampleNorm, v, material.roughness, material.diffuseColor, material.specularColor, material.specularF90,\n            pos, modelMatrix, viewMatrix, projectionMatrix, material.ior, material.thickness  + thickness_smear * (i + randomCoords) / float(${samples}),\n            material.attenuationColor, material.attenuationDistance\n          ).r;\n          transmissionG = getIBLVolumeRefraction(\n            sampleNorm, v, material.roughness, material.diffuseColor, material.specularColor, material.specularF90,\n            pos, modelMatrix, viewMatrix, projectionMatrix, material.ior  * (1.0 + chromaticAberration * (i + randomCoords) / float(${samples})) , material.thickness + thickness_smear * (i + randomCoords) / float(${samples}),\n            material.attenuationColor, material.attenuationDistance\n          ).g;\n          transmissionB = getIBLVolumeRefraction(\n            sampleNorm, v, material.roughness, material.diffuseColor, material.specularColor, material.specularF90,\n            pos, modelMatrix, viewMatrix, projectionMatrix, material.ior * (1.0 + 2.0 * chromaticAberration * (i + randomCoords) / float(${samples})), material.thickness + thickness_smear * (i + randomCoords) / float(${samples}),\n            material.attenuationColor, material.attenuationDistance\n          ).b;\n          transmission.r += transmissionR;\n          transmission.g += transmissionG;\n          transmission.b += transmissionB;\n        }\n        transmission /= ${samples}.0;\n        totalDiffuse = mix( totalDiffuse, transmission.rgb, material.transmission );\\n`);\n    };\n\n    Object.keys(this.uniforms).forEach(name => Object.defineProperty(this, name, {\n      get: () => this.uniforms[name].value,\n      set: v => this.uniforms[name].value = v\n    }));\n  }\n\n}\n\nconst MeshTransmissionMaterial = /*#__PURE__*/React.forwardRef(({\n  buffer,\n  transmissionSampler = false,\n  backside = false,\n  side = THREE.FrontSide,\n  transmission = 1,\n  thickness = 0,\n  backsideThickness = 0,\n  samples = 10,\n  resolution,\n  backsideResolution,\n  background,\n  ...props\n}, fref) => {\n  extend({\n    MeshTransmissionMaterial: MeshTransmissionMaterialImpl\n  });\n  const ref = React.useRef(null);\n  const [discardMaterial] = React.useState(() => new DiscardMaterial());\n  const fboBack = useFBO(backsideResolution || resolution);\n  const fboMain = useFBO(resolution);\n  let oldBg;\n  let oldTone;\n  let parent;\n  useFrame(state => {\n    ref.current.time = state.clock.getElapsedTime(); // Render only if the buffer matches the built-in and no transmission sampler is set\n\n    if (ref.current.buffer === fboMain.texture && !transmissionSampler) {\n      parent = ref.current.__r3f.parent;\n\n      if (parent) {\n        // Save defaults\n        oldTone = state.gl.toneMapping;\n        oldBg = state.scene.background; // Switch off tonemapping lest it double tone maps\n        // Save the current background and set the HDR as the new BG\n        // Use discardmaterial, the parent will be invisible, but it's shadows will still be cast\n\n        state.gl.toneMapping = THREE.NoToneMapping;\n        if (background) state.scene.background = background;\n        parent.material = discardMaterial;\n\n        if (backside) {\n          // Render into the backside buffer\n          state.gl.setRenderTarget(fboBack);\n          state.gl.render(state.scene, state.camera); // And now prepare the material for the main render using the backside buffer\n\n          parent.material = ref.current;\n          parent.material.buffer = fboBack.texture;\n          parent.material.thickness = backsideThickness;\n          parent.material.side = THREE.BackSide;\n        } // Render into the main buffer\n\n\n        state.gl.setRenderTarget(fboMain);\n        state.gl.render(state.scene, state.camera);\n        parent.material.thickness = thickness;\n        parent.material.side = side;\n        parent.material.buffer = fboMain.texture; // Set old state back\n\n        state.scene.background = oldBg;\n        state.gl.setRenderTarget(null);\n        parent.material = ref.current;\n        state.gl.toneMapping = oldTone;\n      }\n    }\n  }); // Forward ref\n\n  React.useImperativeHandle(fref, () => ref.current, []);\n  return /*#__PURE__*/React.createElement(\"meshTransmissionMaterial\", _extends({\n    // Samples must re-compile the shader so we memoize it\n    args: [samples, transmissionSampler],\n    ref: ref\n  }, props, {\n    buffer: buffer || fboMain.texture // @ts-ignore\n    ,\n    _transmission: transmission // In order for this to not incur extra cost \"transmission\" must be set to 0 and treated as a reserved prop.\n    // This is because THREE.WebGLRenderer will check for transmission > 0 and execute extra renders.\n    // The exception is when transmissionSampler is set, in which case we are using three's built in sampler.\n    ,\n    transmission: transmissionSampler ? transmission : 0,\n    thickness: thickness,\n    side: side\n  }));\n});\n\nexport { MeshTransmissionMaterial };\n","const _lut = [ '00', '01', '02', '03', '04', '05', '06', '07', '08', '09', '0a', '0b', '0c', '0d', '0e', '0f', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '1a', '1b', '1c', '1d', '1e', '1f', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '2a', '2b', '2c', '2d', '2e', '2f', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39', '3a', '3b', '3c', '3d', '3e', '3f', '40', '41', '42', '43', '44', '45', '46', '47', '48', '49', '4a', '4b', '4c', '4d', '4e', '4f', '50', '51', '52', '53', '54', '55', '56', '57', '58', '59', '5a', '5b', '5c', '5d', '5e', '5f', '60', '61', '62', '63', '64', '65', '66', '67', '68', '69', '6a', '6b', '6c', '6d', '6e', '6f', '70', '71', '72', '73', '74', '75', '76', '77', '78', '79', '7a', '7b', '7c', '7d', '7e', '7f', '80', '81', '82', '83', '84', '85', '86', '87', '88', '89', '8a', '8b', '8c', '8d', '8e', '8f', '90', '91', '92', '93', '94', '95', '96', '97', '98', '99', '9a', '9b', '9c', '9d', '9e', '9f', 'a0', 'a1', 'a2', 'a3', 'a4', 'a5', 'a6', 'a7', 'a8', 'a9', 'aa', 'ab', 'ac', 'ad', 'ae', 'af', 'b0', 'b1', 'b2', 'b3', 'b4', 'b5', 'b6', 'b7', 'b8', 'b9', 'ba', 'bb', 'bc', 'bd', 'be', 'bf', 'c0', 'c1', 'c2', 'c3', 'c4', 'c5', 'c6', 'c7', 'c8', 'c9', 'ca', 'cb', 'cc', 'cd', 'ce', 'cf', 'd0', 'd1', 'd2', 'd3', 'd4', 'd5', 'd6', 'd7', 'd8', 'd9', 'da', 'db', 'dc', 'dd', 'de', 'df', 'e0', 'e1', 'e2', 'e3', 'e4', 'e5', 'e6', 'e7', 'e8', 'e9', 'ea', 'eb', 'ec', 'ed', 'ee', 'ef', 'f0', 'f1', 'f2', 'f3', 'f4', 'f5', 'f6', 'f7', 'f8', 'f9', 'fa', 'fb', 'fc', 'fd', 'fe', 'ff' ];\n\nlet _seed = 1234567;\n\n\nconst DEG2RAD = Math.PI / 180;\nconst RAD2DEG = 180 / Math.PI;\n\n// http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/21963136#21963136\nfunction generateUUID() {\n\n\tconst d0 = Math.random() * 0xffffffff | 0;\n\tconst d1 = Math.random() * 0xffffffff | 0;\n\tconst d2 = Math.random() * 0xffffffff | 0;\n\tconst d3 = Math.random() * 0xffffffff | 0;\n\tconst uuid = _lut[ d0 & 0xff ] + _lut[ d0 >> 8 & 0xff ] + _lut[ d0 >> 16 & 0xff ] + _lut[ d0 >> 24 & 0xff ] + '-' +\n\t\t\t_lut[ d1 & 0xff ] + _lut[ d1 >> 8 & 0xff ] + '-' + _lut[ d1 >> 16 & 0x0f | 0x40 ] + _lut[ d1 >> 24 & 0xff ] + '-' +\n\t\t\t_lut[ d2 & 0x3f | 0x80 ] + _lut[ d2 >> 8 & 0xff ] + '-' + _lut[ d2 >> 16 & 0xff ] + _lut[ d2 >> 24 & 0xff ] +\n\t\t\t_lut[ d3 & 0xff ] + _lut[ d3 >> 8 & 0xff ] + _lut[ d3 >> 16 & 0xff ] + _lut[ d3 >> 24 & 0xff ];\n\n\t// .toLowerCase() here flattens concatenated strings to save heap memory space.\n\treturn uuid.toLowerCase();\n\n}\n\nfunction clamp( value, min, max ) {\n\n\treturn Math.max( min, Math.min( max, value ) );\n\n}\n\n// compute euclidean modulo of m % n\n// https://en.wikipedia.org/wiki/Modulo_operation\nfunction euclideanModulo( n, m ) {\n\n\treturn ( ( n % m ) + m ) % m;\n\n}\n\n// Linear mapping from range <a1, a2> to range <b1, b2>\nfunction mapLinear( x, a1, a2, b1, b2 ) {\n\n\treturn b1 + ( x - a1 ) * ( b2 - b1 ) / ( a2 - a1 );\n\n}\n\n// https://www.gamedev.net/tutorials/programming/general-and-gameplay-programming/inverse-lerp-a-super-useful-yet-often-overlooked-function-r5230/\nfunction inverseLerp( x, y, value ) {\n\n\tif ( x !== y ) {\n\n\t\treturn ( value - x ) / ( y - x );\n\n\t} else {\n\n\t\treturn 0;\n\n\t}\n\n}\n\n// https://en.wikipedia.org/wiki/Linear_interpolation\nfunction lerp( x, y, t ) {\n\n\treturn ( 1 - t ) * x + t * y;\n\n}\n\n// http://www.rorydriscoll.com/2016/03/07/frame-rate-independent-damping-using-lerp/\nfunction damp( x, y, lambda, dt ) {\n\n\treturn lerp( x, y, 1 - Math.exp( - lambda * dt ) );\n\n}\n\n// https://www.desmos.com/calculator/vcsjnyz7x4\nfunction pingpong( x, length = 1 ) {\n\n\treturn length - Math.abs( euclideanModulo( x, length * 2 ) - length );\n\n}\n\n// http://en.wikipedia.org/wiki/Smoothstep\nfunction smoothstep( x, min, max ) {\n\n\tif ( x <= min ) return 0;\n\tif ( x >= max ) return 1;\n\n\tx = ( x - min ) / ( max - min );\n\n\treturn x * x * ( 3 - 2 * x );\n\n}\n\nfunction smootherstep( x, min, max ) {\n\n\tif ( x <= min ) return 0;\n\tif ( x >= max ) return 1;\n\n\tx = ( x - min ) / ( max - min );\n\n\treturn x * x * x * ( x * ( x * 6 - 15 ) + 10 );\n\n}\n\n// Random integer from <low, high> interval\nfunction randInt( low, high ) {\n\n\treturn low + Math.floor( Math.random() * ( high - low + 1 ) );\n\n}\n\n// Random float from <low, high> interval\nfunction randFloat( low, high ) {\n\n\treturn low + Math.random() * ( high - low );\n\n}\n\n// Random float from <-range/2, range/2> interval\nfunction randFloatSpread( range ) {\n\n\treturn range * ( 0.5 - Math.random() );\n\n}\n\n// Deterministic pseudo-random float in the interval [ 0, 1 ]\nfunction seededRandom( s ) {\n\n\tif ( s !== undefined ) _seed = s;\n\n\t// Mulberry32 generator\n\n\tlet t = _seed += 0x6D2B79F5;\n\n\tt = Math.imul( t ^ t >>> 15, t | 1 );\n\n\tt ^= t + Math.imul( t ^ t >>> 7, t | 61 );\n\n\treturn ( ( t ^ t >>> 14 ) >>> 0 ) / 4294967296;\n\n}\n\nfunction degToRad( degrees ) {\n\n\treturn degrees * DEG2RAD;\n\n}\n\nfunction radToDeg( radians ) {\n\n\treturn radians * RAD2DEG;\n\n}\n\nfunction isPowerOfTwo( value ) {\n\n\treturn ( value & ( value - 1 ) ) === 0 && value !== 0;\n\n}\n\nfunction ceilPowerOfTwo( value ) {\n\n\treturn Math.pow( 2, Math.ceil( Math.log( value ) / Math.LN2 ) );\n\n}\n\nfunction floorPowerOfTwo( value ) {\n\n\treturn Math.pow( 2, Math.floor( Math.log( value ) / Math.LN2 ) );\n\n}\n\nfunction setQuaternionFromProperEuler( q, a, b, c, order ) {\n\n\t// Intrinsic Proper Euler Angles - see https://en.wikipedia.org/wiki/Euler_angles\n\n\t// rotations are applied to the axes in the order specified by 'order'\n\t// rotation by angle 'a' is applied first, then by angle 'b', then by angle 'c'\n\t// angles are in radians\n\n\tconst cos = Math.cos;\n\tconst sin = Math.sin;\n\n\tconst c2 = cos( b / 2 );\n\tconst s2 = sin( b / 2 );\n\n\tconst c13 = cos( ( a + c ) / 2 );\n\tconst s13 = sin( ( a + c ) / 2 );\n\n\tconst c1_3 = cos( ( a - c ) / 2 );\n\tconst s1_3 = sin( ( a - c ) / 2 );\n\n\tconst c3_1 = cos( ( c - a ) / 2 );\n\tconst s3_1 = sin( ( c - a ) / 2 );\n\n\tswitch ( order ) {\n\n\t\tcase 'XYX':\n\t\t\tq.set( c2 * s13, s2 * c1_3, s2 * s1_3, c2 * c13 );\n\t\t\tbreak;\n\n\t\tcase 'YZY':\n\t\t\tq.set( s2 * s1_3, c2 * s13, s2 * c1_3, c2 * c13 );\n\t\t\tbreak;\n\n\t\tcase 'ZXZ':\n\t\t\tq.set( s2 * c1_3, s2 * s1_3, c2 * s13, c2 * c13 );\n\t\t\tbreak;\n\n\t\tcase 'XZX':\n\t\t\tq.set( c2 * s13, s2 * s3_1, s2 * c3_1, c2 * c13 );\n\t\t\tbreak;\n\n\t\tcase 'YXY':\n\t\t\tq.set( s2 * c3_1, c2 * s13, s2 * s3_1, c2 * c13 );\n\t\t\tbreak;\n\n\t\tcase 'ZYZ':\n\t\t\tq.set( s2 * s3_1, s2 * c3_1, c2 * s13, c2 * c13 );\n\t\t\tbreak;\n\n\t\tdefault:\n\t\t\tconsole.warn( 'THREE.MathUtils: .setQuaternionFromProperEuler() encountered an unknown order: ' + order );\n\n\t}\n\n}\n\nfunction denormalize( value, array ) {\n\n\tswitch ( array.constructor ) {\n\n\t\tcase Float32Array:\n\n\t\t\treturn value;\n\n\t\tcase Uint16Array:\n\n\t\t\treturn value / 65535.0;\n\n\t\tcase Uint8Array:\n\n\t\t\treturn value / 255.0;\n\n\t\tcase Int16Array:\n\n\t\t\treturn Math.max( value / 32767.0, - 1.0 );\n\n\t\tcase Int8Array:\n\n\t\t\treturn Math.max( value / 127.0, - 1.0 );\n\n\t\tdefault:\n\n\t\t\tthrow new Error( 'Invalid component type.' );\n\n\t}\n\n}\n\nfunction normalize( value, array ) {\n\n\tswitch ( array.constructor ) {\n\n\t\tcase Float32Array:\n\n\t\t\treturn value;\n\n\t\tcase Uint16Array:\n\n\t\t\treturn Math.round( value * 65535.0 );\n\n\t\tcase Uint8Array:\n\n\t\t\treturn Math.round( value * 255.0 );\n\n\t\tcase Int16Array:\n\n\t\t\treturn Math.round( value * 32767.0 );\n\n\t\tcase Int8Array:\n\n\t\t\treturn Math.round( value * 127.0 );\n\n\t\tdefault:\n\n\t\t\tthrow new Error( 'Invalid component type.' );\n\n\t}\n\n}\n\n\n\nexport {\n\tDEG2RAD,\n\tRAD2DEG,\n\tgenerateUUID,\n\tclamp,\n\teuclideanModulo,\n\tmapLinear,\n\tinverseLerp,\n\tlerp,\n\tdamp,\n\tpingpong,\n\tsmoothstep,\n\tsmootherstep,\n\trandInt,\n\trandFloat,\n\trandFloatSpread,\n\tseededRandom,\n\tdegToRad,\n\tradToDeg,\n\tisPowerOfTwo,\n\tceilPowerOfTwo,\n\tfloorPowerOfTwo,\n\tsetQuaternionFromProperEuler,\n\tnormalize,\n\tdenormalize,\n};\n","import React, { useRef, useState, Suspense, useEffect, memo } from \"react\";\nimport { MeshTransmissionMaterial } from \"@react-three/drei\";\nimport { useFrame } from \"@react-three/fiber\";\nimport { useSpring, animated } from \"@react-spring/three\";\nimport { RigidBody, CuboidCollider } from \"@react-three/rapier\";\nimport { randFloat } from \"three/src/math/MathUtils\";\nimport { random } from \"../utils\";\nimport { useStore } from \"../store\";\n\nconst Bonus = ({ nodes, material }) => {\n  const position = { x: -0.02, z: 2.3 };\n  const xPos = randFloat(-2, 2);\n  const zPos = randFloat(-1.4, 1.4);\n\n  const icecube = useRef();\n  const gift = useRef();\n\n  const [giftIntersecting, setGiftIntersecting] = useState(false);\n  const isGift = useStore((state) => state.gift);\n  const addGift = useStore((state) => state.getGift);\n  const [springs, api] = useSpring(() => ({\n    scale: -1,\n    config: (key) => {\n      switch (key) {\n        case \"scale\":\n          return {\n            mass: 2,\n            friction: 6,\n          };\n        default:\n          return {};\n      }\n    },\n  }));\n\n  const getGift = (payload) => {\n    addGift(true);\n    random();\n    api.start({\n      scale: -1,\n    });\n  };\n\n  useEffect(() => {\n    if (isGift) {\n      api.start({\n        scale: 1,\n      });\n    }\n  }, [isGift]);\n\n  useFrame((state, delta) => {\n    icecube.current.rotation.y += 0.34 * delta;\n  });\n\n  return (\n    <>\n      <animated.group\n        ref={gift}\n        scale-y={springs.scale}\n        position={[xPos, isGift ? 0 : -0.5, zPos]}>\n        <mesh\n          ref={icecube}\n          castShadow\n          geometry={nodes.icecube.geometry}\n          position={[position.x, 0.34, position.z]}>\n          <MeshTransmissionMaterial\n            transmission={1}\n            roughness={0.3}\n            thickness={0.1}\n            ior={1.5}\n            distortion={0}\n            distortionScale={0.3}\n            attenuationDistance={0.5}\n            attenuationColor={\"#ffffff\"}\n            color={\"#b9e8ea\"}\n            background={\"#ffffff\"}\n            transmissionSampler={false}\n          />\n        </mesh>\n        <mesh\n          geometry={nodes[\"question-bottom\"].geometry}\n          position={[position.x, 0.2, position.z]}>\n          <meshBasicMaterial color={\"blue\"} />\n        </mesh>\n        <mesh\n          geometry={nodes[\"question-top\"].geometry}\n          position={[-0.05 + position.x, 0.51, position.z]}>\n          <meshBasicMaterial color={\"blue\"} />\n        </mesh>\n      </animated.group>\n      <RigidBody type=\"fixed\">\n        <CuboidCollider\n          sensor\n          position={[xPos, isGift ? 0.34 : -0.5, zPos + 2.3]}\n          args={[0.2, 0.2, 0.2]}\n          onIntersectionEnter={(payload) => {\n            getGift(payload);\n          }}\n        />\n      </RigidBody>\n    </>\n  );\n};\n\nexport default Bonus;\n"],"names":["shaderMaterial","uniforms","vertexShader","fragmentShader","onInit","material","THREE.ShaderMaterial","parameters","entries","acc","name","value","uniform","THREE.UniformsUtils","v","THREE.MathUtils","useFBO","width","height","settings","gl","size","viewport","useThree","_width","_height","_settings","samples","depth","targetSettings","target","React.useMemo","THREE.WebGLRenderTarget","THREE.LinearFilter","THREE.HalfFloatType","THREE.DepthTexture","THREE.FloatType","React.useLayoutEffect","React.useEffect","DiscardMaterial","MeshTransmissionMaterialImpl","THREE.MeshPhysicalMaterial","transmissionSampler","THREE.Color","shader","MeshTransmissionMaterial","React.forwardRef","buffer","backside","side","THREE.FrontSide","transmission","thickness","backsideThickness","resolution","backsideResolution","background","props","fref","extend","ref","React.useRef","discardMaterial","React.useState","fboBack","fboMain","oldBg","oldTone","parent","useFrame","state","THREE.NoToneMapping","THREE.BackSide","React.useImperativeHandle","React.createElement","_extends","randFloat","low","high","Bonus","nodes","position","xPos","zPos","icecube","useRef","gift","useState","isGift","useStore","addGift","springs","api","useSpring","key","getGift","payload","useEffect","delta","jsxs","Fragment","animated","jsx","RigidBody","CuboidCollider"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4]}